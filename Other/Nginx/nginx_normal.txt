user root;

#设置值和CPU核心数一致
worker_processes 1;

#日志位置和日志级别
error_log  /usr/local/webserver/nginx/logs/nginx_error.log crit;

#进程pid存放位置
pid /usr/local/webserver/nginx/nginx.pid;

#Specifies the value for maximum file descriptors that can be opened by this process.
worker_rlimit_nofile 65535;

#工作模式及连接数上限
events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
    use epoll;
    #单个后台worker process进程的最大并发链接数
    worker_connections 65535;
}

http {
    #文件扩展名与类型映射表
    include mime.types;
    #默认文件类型
    default_type application/octet-stream;
    #日志格式
    log_format main  '$remote_addr - $remote_user [$time_local] "$request" '
               '$status $body_bytes_sent "$http_referer" '
               '"$http_user_agent" $http_x_forwarded_for';
               
   #charset gb2312;
   server_names_hash_bucket_size 128;
   client_header_buffer_size 32k;
   large_client_header_buffers 4 32k;
   client_max_body_size 8m;
   
   #开启高效传输模式
   sendfile on;
   tcp_nopush on;
   #连接超时时间，单位是秒
   keepalive_timeout 60;
   tcp_nodelay on;
   #FastCGI相关参数：为了改善网站性能：减少资源占用，提高访问速度
   fastcgi_connect_timeout 300;
   fastcgi_send_timeout 300;
   fastcgi_read_timeout 300;
   fastcgi_buffer_size 64k;
   fastcgi_buffers 4 64k;
   fastcgi_busy_buffers_size 128k;
   fastcgi_temp_file_write_size 128k;
   
   #开启gzip压缩功能
   gzip on;
   gzip_min_length 1k;
   gzip_buffers 4 16k;
   gzip_http_version 1.0;
   gzip_comp_level 2;
   gzip_types text/plain application/x-javascript text/css application/xml;
   gzip_vary on;
   #limit_zone crawler $binary_remote_addr 10m;
   
   #下面是server虚拟主机的配置（配置http强制跳转到https）
   server {
      #监听端口
      listen 80;
      #域名
      server_name ngrok.wangmincong.xyz ngrok.zhukeqing.xyz;
      #重定向
      rewrite ^(.*) https://$server_name$1 permanent;
   }
   #配置https请求反向代理到的端口
   server {
    listen 443 ssl;
    server_name ngrok.wangmincong.xyz ngrok.zhukeqing.xyz;
    index index.html index.htm index.php index.ftl;
    #站点根目录，即网站程序存放目录
    root /opt/modules/nginx/html;
    #ssl证书配置
    ssl on;
    ssl_certificate /opt/cert/ngrok_zhukeqing_xyz/ssl.crt;
    ssl_certificate_key  /opt/cert/ngrok_zhukeqing_xyz/ssl.key;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache    shared:SSL:1m;
    ssl_session_timeout  5m;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_prefer_server_ciphers  on;
    #禁止在header中出现服务器版本，防止黑客利用版本漏洞攻击
    server_tokens off;
    #如果是全站 HTTPS 并且不考虑 HTTP 的话，可以加入 HSTS 告诉你的浏览器本网站全站加密，并且强制用 HTTPS 访问
    fastcgi_param   HTTPS               on;
    fastcgi_param   HTTP_SCHEME         https;
    access_log /usr/local/webserver/nginx/logs/httpsaccess.log;
    #配置访问项目端口：
    location / {
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_set_header X-NginX-Proxy true;
          #你的项目端口号
          proxy_pass http://localhost:8089 ; 
          proxy_redirect off;
    }
    #符合php扩展名的请求调度到fcgi server
    location ~ .*\.(php|php5)?$ {
       #fastcgi_pass unix:/tmp/php-cgi.sock;
       fastcgi_pass 127.0.0.1:9000;
       fastcgi_index index.php;
       include fastcgi.conf;
    }
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|ico|css|js|properties|json)$ {
       #让nginx能正常加载这些静态文件
       proxy_pass http://localhost:8089;
       #客户端缓存上述js,css数据30天
       expires 30d;
       # access_log off;
    }
    #将符合js,css文件的等设定expries缓存参数，要求浏览器缓存。
    location ~ .*\.(js|css)?$ {
       expires 15d;
       # access_log off;
     }
     access_log off;
   }
 }